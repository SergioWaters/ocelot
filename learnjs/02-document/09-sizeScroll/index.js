'use strict'
/**
 * Найти размер прокрутки снизу
важность: 5
Свойство elem.scrollTop содержит размер прокрученной области при отсчёте сверху. А как подсчитать размер прокрутки снизу (назовём его scrollBottom)?

Напишите соответствующее выражение для произвольного элемента elem.

P.S. Проверьте: если прокрутки нет вообще или элемент полностью прокручен – оно должно давать 0.

решение
*/
const scrollBottom = elem.scrollHeight - elem.scrollTop - elem.clientHeight;


/**
Узнать ширину полосы прокрутки
важность: 3
Напишите код, который возвращает ширину стандартной полосы прокрутки.

Для Windows она обычно колеблется от 12px до 20px. Если браузер не выделяет место под полосу прокрутки (так тоже бывает, она может быть прозрачной над текстом), тогда значение может быть 0px.

P.S. Ваш код должен работать в любом HTML-документе, независимо от его содержимого.

решение
*/
let div = document.createElement('div');

div.style.overflowY = 'scroll';
div.style.width = '50px';
div.style.height = '50px';

document.body.append(div);
const scrollWidth = div.offsetWidth - div.clientWidth;


/**
Поместите мяч в центр поля
важность: 5
Исходный документ выглядит так:


Каковы координаты центра поля?

Вычислите их и используйте, чтобы поместить мяч в центр поля:


Элемент должен позиционироваться за счёт JavaScript, а не CSS.
Код должен работать с любым размером мяча (10, 20, 30 пикселей) и любым размером поля без привязки к исходным значениям.
P.S. Да, центрирование можно сделать при помощи чистого CSS, но задача именно на JavaScript. Далее будут другие темы и более сложные ситуации, когда JavaScript будет уже точно необходим, это – своего рода «разминка».

Открыть песочницу для задачи.

решение
*/
const field = null // футбольное поле
const ball = null // картинка мяча

// находим центр картинки
const ballOffset = {
  width: ball.offsetWidth / 2, 
  height: ball.offsetHeight / 2
}

// находим середину поля
const fieldCenter = {
  width: field.clientWidth / 2,
  height: field.clientHeight / 2
} 

ball.style.left = Math.round(fieldCenter.width - ballOffset.width) + 'px';
ball.style.top = Math.round(fieldCenter.height - ballOffset.height) + 'px';



/**
В чём отличие CSS-свойств width и clientWidth
важность: 5
В чём отличие между getComputedStyle(elem).width и elem.clientWidth?

Укажите хотя бы 3 отличия, лучше – больше.

решение
*/
/**
 - clientWidth возвращает число, а getComputedStyle(elem).width – строку с px на конце.
 - getComputedStyle не всегда даст ширину, он может вернуть, к примеру, "auto" для строчного элемента.
 - clientWidth соответствует внутренней области элемента, включая внутренние отступы padding, а CSS-ширина (при стандартном значении box-sizing) соответствует внутренней области без внутренних отступов padding.
 - Если есть полоса прокрутки, и для неё зарезервировано место, то некоторые браузеры вычитают его из CSS-ширины (т.к. оно больше недоступно для содержимого), а некоторые – нет. Свойство clientWidth всегда ведёт себя одинаково: оно всегда обозначает размер за вычетом прокрутки, т.е. реально доступный для содержимого.
 */
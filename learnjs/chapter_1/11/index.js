'use strict'
/**
 * Обязателен ли "else"?
важность: 4
Следующая функция возвращает true, если параметр age больше 18.

В ином случае она запрашивает подтверждение через confirm и возвращает его результат:

function checkAge(age) {
  if (age > 18) {
    return true;
  } else {
    // ...
    return confirm('Родители разрешили?');
  }
}
 Будет ли эта функция работать как-то иначе, если убрать else?

function checkAge(age) { // this fn
  if (age > 18) {
    return true;
  }
  // ...
  return confirm('Родители разрешили?');
}
 Есть ли хоть одно отличие в поведении этого варианта?
*/

// B else нет необходимости. При выполнении условия, функция остановится и вернет true не переходя к confirm

/**
 * Перепишите функцию, используя оператор '?' или '||'
Следующая функция возвращает true, если параметр age больше 18.

В ином случае она задаёт вопрос confirm и возвращает его результат.

function checkAge(age) {
  if (age > 18) {
    return true;
  } else {
    return confirm('Родители разрешили?');
  }
}
Перепишите функцию, чтобы она делала то же самое, но без if, в одну строку.

Сделайте два варианта функции checkAge:

Используя оператор ?
Используя оператор ||
 */
function checkAgeIf(age){
  return (age > 18) ? true : confirm('Родители разрешили?')
}
function checkAgeOr(age){
  return age > 18 || confirm('Родители разрешили?')
}

/**
 * Функция min(a, b)
Напишите функцию min(a,b), которая возвращает меньшее из чисел a и b.

Пример вызовов:

min(2, 5) == 2
min(3, -1) == -1
min(1, 1) == 1
 */
function findMin(a, b){
  return a > b ? b : a
}

/**
 * Функция pow(x,n)
Напишите функцию pow(x,n), которая возводит x в степень n и возвращает результат.

pow(3, 2) = 3 * 3 = 9
pow(3, 3) = 3 * 3 * 3 = 27
pow(1, 100) = 1 * 1 * ...* 1 = 1
Создайте страницу, которая запрашивает x и n, а затем выводит результат pow(x,n).

Запустить демо

P.S. В этой задаче функция обязана поддерживать только натуральные значения n, т.е. целые от 1 и выше.
 */
function powNumber(number, pow){
  if(pow < 1) return 'pow should be greater than 0'
  let res = number;
  let counter = 1;
  while(counter < pow){
    res *= number
    counter++
  }
  console.log(res)
}